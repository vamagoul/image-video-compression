#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <conio.h>
#include <malloc.h>
#include "FrameDecLib.h"

int num_of_chars;
signed char Quantized_Block[8][8];
float IDCT_coeff[8][8];//Each 8X8 array that returns from DCT_Transform function have to be global so to don't loose the address
signed char stream_for_zi_za[64];

int comparator(const void *p, const void *q) {
	
    NODE * l = *((NODE **)p);
    NODE * r = *((NODE **)q); 

	if (l->occurency < r->occurency)
        return -1;
    else if (l->occurency > r->occurency)
        return 1;
    else
        return 0;

	}

float * block_decompress(signed char * buffer, char sel, char distortion){

	int block_to_DCT[8][8];
	int Quantized_YUV[8][8];
	int i, j, point1 ,point2, z, stats_iter,x,y;
	float * dct_coeffs;
	int * stream;
	float * dct_coeffs_Y;
	int iter;
	bool flag = false;
	//int * Quantized_Y = (int *)malloc(sizeof(int)*rows*cols);	//Take space for Quantized_Y for Stats reasons
	FILE *test;
	int tmp;
	signed char * Quantized_coeffs;
	int * Coeffs_to_IDCT = (int *)malloc(sizeof(int)*64);

	float * result;	//Result from IDCT

	
	int quant_UV[8][8] = {{80,60,50,80,120,200,255,255},
						{55,60,70,95,130,255,255,255},
						{70,65,80,120,200,255,255,255},
						{70,85,110,145,255,255,255,255},
						{90,110,185,255,255,255,255,255},
						{120,175,255,255,255,255,255,255},
						{245,255,255,255,255,255,255,255},
						{255,255,255,255,255,255,255,255}};

	int quant_Y[8][8] = {{16,11,10,16,24,40,51,51},
						{12,12,14,19,26,58,60,55},
						{14,13,16,24,40,57,69,56},
						{14,17,22,29,51,87,80,62},
						{18,22,37,56,68,109,103,77},
						{24,35,55,64,81,104,113,92},
						{49,64,78,87,103,121,120,101},
						{72,92,95,98,112,100,103,99}};

		

				z = 0;
				//-----INVERSE RUN LENGTH-----
				//Take the byte stream from file and open it to become 64 bytes 8X8 elements

				i = 0;
				while(i<128){	 
						
					if(((i%2) == 0) && (buffer[i] < 0)){	//if we reached at the end of stream break
							
							break;										
					}
					else{

						if((i%2) == 0){		//The even itterations are the num of zeros

							for(j=0;j<buffer[i];j++){

								stream_for_zi_za[z] = 0;
								z++;
								if(z == 64){

									flag = true;

								}
							}

						}
						else{		//The odd itterations are the no-zero nums

							if(flag){

								break;
							}

							stream_for_zi_za[z] = buffer[i];
							z++;
						}
					
					}

					i++;

				}

				//Byte Stream[64] ready for inverse zig-zag to form the 8X8 array of quantized coeffs
				Quantized_coeffs = Inv_Zig_Zag(stream_for_zi_za);


				//Restore the DCT elements from quantization by multiply them with the value we have divide

				if(distortion == '1'){

					for(i=0;i<8;i++){
				
							for(j=0;j<8;j++){

								Coeffs_to_IDCT[i*8+j] = Quantized_coeffs[i*8+j]*quant_UV[i][j];			
							}
						}


				}
				else if(distortion == '2'){

					if(sel == 'o'){

						for(i=0;i<8;i++){
				
							for(j=0;j<8;j++){

 								Coeffs_to_IDCT[i*8+j] = Quantized_coeffs[i*8+j]*quant_Y[i][j];			
							}
						}

					}
					else{

						for(i=0;i<8;i++){
				
							for(j=0;j<8;j++){

								Coeffs_to_IDCT[i*8+j] = Quantized_coeffs[i*8+j]*quant_UV[i][j];			
							}
						}

					}

				}
				else{

					for(i=0;i<8;i++){
				
							for(j=0;j<8;j++){

								Coeffs_to_IDCT[i*8+j] = Quantized_coeffs[i*8+j]*quant_Y[i][j];			
							}
						}

				}

				//We are ready to make the IDCT so to restore the coefficients
				result = IDCT_Transform(Coeffs_to_IDCT);

				//We rounding the values from IDCT and add 128 to have real YUV values for display to screen
				for(i=0;i<8;i++){
				
						for(j=0;j<8;j++){

							result[i*8+j] = floor(result[i*8+j]+0.5)+128;
						}

				}

				
				free(Coeffs_to_IDCT);


		return(result);


}
 
float * IDCT_Transform(int * buffer){


	int i,j,x,y;
	float cons;
	float Sum;
	float C_i, C_j;

	float q;
	cons = 0.25;


	for(i=0;i<8;i++){	 
				
		for(j=0;j<8;j++){
					
				Sum = 0;					

				for(x=0;x<8;x++){
				
					for(y=0;y<8;y++){

						if(x==0){

							C_i = 0.707;
						}
						else{

							C_i = 1;
						}


						if(y==0){

							C_j = 0.707;
						}
						else{

							C_j = 1;
						}

						q = buffer[x*8+y];
						//Sum = Sum + buffer[x*8+y]*cos((long double)((int)(((i<<1)+1)*x*3.14)>>4))*cos((long double)((int)(((j<<1)+1)*y*3.14)>>4))*((x == 0) ? 0.707 : 1.)*((y == 0) ? 0.707 : 1.);
						Sum = Sum + q*C_j*C_i*cos((((i*2) + 1)*x*3.14)/16)*cos((((j*2) + 1)*y*3.14)/16);
					}

				}

				IDCT_coeff[i][j] = Sum*cons;	//Round the result from IDCT to nearest integer and add 128 to restore the primary value


		}
	}



   	return &IDCT_coeff[0][0]; 

}

signed char * Inv_Zig_Zag(signed char * buffer){



	int i,j, iter;
	int z = 0;
	bool flag = true;


		i = 0;
		j = 0;

		//byte_stream[z] = buffer[i][j];

		Quantized_Block[i][j] = buffer[z];
		z++;

		for(iter=0;iter<7;iter++){	 							
					
				if(flag){

					j++;	//Gia na topothetisei to deksio stoixeio
					//byte_stream[z] = buffer[i][j];
					Quantized_Block[i][j] = buffer[z];
					z++;
				}
				else{

					i++;	//Gia na topothetisei to apo katw stoixeio
					//byte_stream[z] = buffer[i][j];
					Quantized_Block[i][j] = buffer[z];
					z++;

				}
					//Gia to katevasma katw aristera
					while(j != 0 && i != 7){ //aristero orio

						i++;
						j--;

						//byte_stream[z] = buffer[i][j];
						Quantized_Block[i][j] = buffer[z];
						z++;
						
					}

					if(i<7){

						i++;	//Gia to katevasma ena stoixeio katw
						//byte_stream[z] = buffer[i][j];
						Quantized_Block[i][j] = buffer[z];
						z++;
					}
					else{

						j++;			//Otan einai sti teleutaia grammi pairnei to deksio stoixeio
						//byte_stream[z] = buffer[i][j];
						Quantized_Block[i][j] = buffer[z];
						z++;
						flag = false;	//Now we want to scan the second half from the array

					}
					
					//Gia to anevasma panw deksia
					while(i != 0 && j != 7){ //panw orio

							i--;
							j++;

							//byte_stream[z] = buffer[i][j];
							Quantized_Block[i][j] = buffer[z];
							z++;			

					}


		}



		return &Quantized_Block[0][0];


}

signed char * Run_Length(int * buffer){

	int i = 0;
	int j = 0;
	int count = 0;
	bool flag = false;
	signed char encoded_word[128];

	while(j<64){


		if(buffer[j] == 0){	//Count the zeros 

			count++;
			flag = true;	//flag true to know when count zeros
			
		}
		else {

			encoded_word[i] = count;	//Give count of zero at first element

			encoded_word[i+1] = buffer[j];	//Give the next number to the next element

			if(flag){	//if we counted zeros and now we stop make count 0 and flag = false

				count = 0;
				flag = false;
			}

			
		}

		if(!flag){	//if we don't count zeros take step of 2 else step 0 to write at encoded_word

			i += 2;
		}		

		j++;
	}

	encoded_word[i] = -1;	//insert negative value at even position to know where the block stops

	return encoded_word;
}

Stats * Keep_Stats(int * buffer,int size){


	int * counts = (int *)malloc(sizeof(int)*size);			


	Stats *result;

	int i,j,count;

	
	count = 1;
	//All the duplicates make them zero
	for(i=0;i<size;i++){

		for(j=i+1;j<size;j++){

			if(buffer[i] == buffer[j] && buffer[i] != 0){

				buffer[j] = 0;
				count++;
			}

		}	//At the first appearance in that position it writes the counts and at the position of duplicates write 1

		//Here it has remove all the duplicates  of a value
		counts[i] = count;
		count = 1;	//To start count or another value

	}		

	num_of_chars = 0;

	for(i=0;i<size;i++){

		if(buffer[i] != 0 ){

			num_of_chars++;
		}
	}

	//We have the num of different characters

    result = (Stats *)malloc(sizeof(Stats)*num_of_chars);	//Take an array dynamically of the size we want


	int z = 0;

	for(i=0;i<size;i++){

		if(buffer[i] != 0){

			result[z].val = buffer[i];
			result[z].occurency = counts[i];
			z++;
		}
	}

	//We have all elements at struct with their value and the occurency 

	free(counts);	//Free the pointer because we have get the occurences ito Stats


	qsort((void*)result, num_of_chars, sizeof(result[0]), comparator);		//Sort the data according the occurrency

	
	for(i=0;i<num_of_chars;i++){

			printf("%d) Val : %d  | Occurrency : %d\n",i ,result[i].val,result[i].occurency);
	}
	
	return result;
}

int Huffman(int * Quantized_Matrix,int rows, int cols){

		
		int i;
		int SubTrees = num_of_chars;
		Stats * stats;
		stats = Keep_Stats(Quantized_Matrix,rows*cols);	//Take stats to build Huffman Tree


		/*-----BUILDING HUFFMAN TREE-----*/
		NODE **queue = (NODE **)malloc(sizeof(NODE)*num_of_chars);	//We have a dynamic array[num_of_chars] from pointers to NODE
		NODE *temp;	//The current node that is goint to be inserted
		NODE *root_huf_tree;	//Root of the huffman tree


		/*Initialiazing the queue*/
		for(i=0;i<num_of_chars;i++){
			queue[i] = (NODE *)malloc(sizeof(NODE));	//To every slot from array make space for one NODE 
			queue[i]->val = stats[i].val;				//Initializing the queue with the stats values
			queue[i]->occurency = stats[i].occurency;
			queue[i]->right_child = NULL;
			queue[i]->left_child = NULL;
		}


		/*Building Tree*/
		i = 0;
		while(SubTrees>1){

			qsort((void*)queue, num_of_chars, sizeof(queue[num_of_chars]), comparator);//Sorting at every iter the queue
			
			temp = (NODE *)malloc(sizeof(NODE));	//Create new node
			temp->left_child = queue[i];			//the 1st smallest make it left_child		
			temp->right_child = queue[i+1];			//the 2nd smallest make it right_child
			temp->occurency = queue[0]->occurency + queue[1]->occurency;	//Sum the 2 occurences
			queue[1] = temp;						//Enqueue the new node
			free(queue[i]);							//Free the 1st position of queue because doesn't needs
			SubTrees--;
			i++;
		}

		root_huf_tree = queue[num_of_chars-1];		//root_huf_tree points to the last element of queue that there is the root of the tree
													//according to the algorithm we set on above


		return 0;


}
