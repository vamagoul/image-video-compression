#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <conio.h>
#include <malloc.h>
#include "FrameEnLib.h"

int num_of_chars;
int byte_stream[64];
float DCT_coeff[8][8];//Each 8X8 array that returns from DCT_Transform function have to be global so to don't loose the address
signed char encoded_word[128];
signed char * Stream_for_File;
FILE *test;


int comparator(const void *p, const void *q) {
	
    NODE * l = *((NODE **)p);
    NODE * r = *((NODE **)q); 

	if (l->occurency < r->occurency)
        return -1;
    else if (l->occurency > r->occurency)
        return 1;
    else
        return 0;

	}

void block_compress(int buffer[][720],int rows, int cols, char sel,char distortion){

	int block_to_DCT[8][8];
	int Quantized_YUV[8][8];
	int i, j, point1 ,point2, z, stats_iter;
	int(*dct_buffer)[8] = block_to_DCT;
	float * dct_coeffs;
	float * dct_coeffs_Y;
	int iter;
	bool flag = false;
	int * Quantized_Y = (int *)malloc(sizeof(int)*rows*cols);	//Take space for Quantized_Y for Stats reasons
	const float Primary_Size = 507000;	//Primary size on Bytes
	static float Compressed_Size = 0; //Compressed size on Bytes
	float Compress_Ratio = 0;


	int quant_UV[8][8] = {{80,60,50,80,120,200,255,255},
						{55,60,70,95,130,255,255,255},
						{70,65,80,120,200,255,255,255},
						{70,85,110,145,255,255,255,255},
						{90,110,185,255,255,255,255,255},
						{120,175,255,255,255,255,255,255},
						{245,255,255,255,255,255,255,255},
						{255,255,255,255,255,255,255,255}};

	int quant_Y[8][8] = {{16,11,10,16,24,40,51,51},
						{12,12,14,19,26,58,60,55},
						{14,13,16,24,40,57,69,56},
						{14,17,22,29,51,87,80,62},
						{18,22,37,56,68,109,103,77},
						{24,35,55,64,81,104,113,92},
						{49,64,78,87,103,121,120,101},
						{72,92,95,98,112,100,103,99}};


	if(sel == 'o'){	//the first time we call this function we opens the file

		test = fopen("../Askisi_3_Decoder/test.my_format","wb");	//opens the file
		fputc(distortion,test);		//Primarily we write how much distortion (and big compress ratio we have compress the frame) so to knoe the decoder
	}

	if(test == NULL) {	//check if file is valid
			
			 perror("Failed to open file\n");
			 getch();

	}


	//Make 8X8 blocks of frame 

		int up = 0;

		for(point1=0;point1<rows;point1 = point1 + 8){

			for(point2=0;point2<cols;point2 = point2 + 8){

				for(i=0;i<8;i++){	 
				
					for(j=0;j<8;j++){	

						block_to_DCT[i][j] = buffer[point1+i][point2+j];	//Here we give an offset each time and takes 8X8 data from the Buffer 
																			//gives them to block_to_DCT scanning them all  
					}

				}

						//In this point we have each time an 8X8 array to be transformed
						dct_coeffs =  DCT_Transform(dct_buffer);	//Call the function to make the transformation
							
							z = 0;
							//Time for quantization by quant_Y array
							if(distortion == '1'){

								for(i=0;i<8;i++){	 
				
										for(j=0;j<8;j++){	

											Quantized_YUV[i][j] = (((int)floor(dct_coeffs[z]))/quant_UV[i][j]);	 
											z++;

										}

									}


							}
							else if(distortion == '2'){

								if(sel == 'o'){
									for(i=0;i<8;i++){	 
				
										for(j=0;j<8;j++){	

											Quantized_YUV[i][j] = (((int)floor(dct_coeffs[z]))/quant_Y[i][j]);	 
											z++;

										}

									}

								}
								else{

									for(i=0;i<8;i++){	 
				
										for(j=0;j<8;j++){	

											Quantized_YUV[i][j] = (((int)floor(dct_coeffs[z]))/quant_UV[i][j]);	 
											z++;

										}

									}

								}

							}
							else{

								for(i=0;i<8;i++){	 
				
										for(j=0;j<8;j++){	

											Quantized_YUV[i][j] = (((int)floor(dct_coeffs[z]))/quant_Y[i][j]);	 
											z++;

										}

									}

							}
					

							Stream_for_File = Run_Length(Zig_Zag(Quantized_YUV));	//We call Zig_Zag and Run_Length to compress each block
							

							//Write each block to the file
							iter = 0;
							while(iter<128){	//Max size code word can be


								if(((iter%2) == 0) && (Stream_for_File[iter] < 0)) {

									fputc(Stream_for_File[iter],test);	//If i am in even iter and value is negative this means the end of block
									Compressed_Size++;
									break;
								}
								else{

									fputc(Stream_for_File[iter],test);
									Compressed_Size++;
								}
								iter++;
							}		

													
							
			}
		}

						
		//Stats * stats;
		//stats = Keep_Stats(Quantized_Y,rows*cols);	//Take stats to build Huffman Tree


		if(sel == 'c'){	//the last time we call this function we close the file

			Compress_Ratio = Primary_Size/(Compressed_Size+1);
			printf("COMPRESS RATIO ACHIEVED: %f\n",Compress_Ratio);

			fflush(test);
			fclose(test);
		}

}

float * DCT_Transform(int buffer[][8]){


	int i,j,x,y;
	float cons;
	float Sum;
	float C_i, C_j;


	for(i=0;i<8;i++){	 
				
		for(j=0;j<8;j++){


					if(i==0){

						C_i = 0.707;
					}
					else{

						C_i = 1;
					}


					if(j==0){

						C_j = 0.707;
					}
					else{

						C_j = 1;
					}

					cons = 0.25*C_i*C_j;
					Sum = 0;


					

					for(x=0;x<8;x++){
				
						for(y=0;y<8;y++){

							Sum = Sum + buffer[x][y]*cos((((x*2)+1)*i*3.14)/16)*cos((((y*2)+1)*j*3.14)/16);

						}

					}

					DCT_coeff[i][j] = Sum*cons;

			}
	}


   	return &DCT_coeff[0][0]; 

}

int * Zig_Zag(int buffer[][8]){



	int i,j, iter;
	int z = 0;
	bool flag = true;


		i = 0;
		j = 0;

		byte_stream[z] = buffer[i][j];
		z++;

		for(iter=0;iter<7;iter++){	 							
					
				if(flag){

					j++;	//To get the right element
					byte_stream[z] = buffer[i][j];
					z++;
				}
				else{

					i++;	//To get the below it element
					byte_stream[z] = buffer[i][j];
					z++;

				}
					//For the down-left scanning
					while(j != 0 && i != 7){ //left limit

						i++;
						j--;

						byte_stream[z] = buffer[i][j];
						z++;
						
					}

					if(i<7){

						i++;	//Take the element below
						byte_stream[z] = buffer[i][j];
						z++;
					}
					else{

						j++;			//if i have reach to the endline read the right element 
						byte_stream[z] = buffer[i][j];
						z++;
						flag = false;	//Now we want to scan the second half from the array

					}
					
					//For the up-right scanning
					while(i != 0 && j != 7){ //up limit

							i--;
							j++;

							byte_stream[z] = buffer[i][j];
							z++;			

					}


		}


		return byte_stream;


}

signed char * Run_Length(int * buffer){

	int i = 0;
	int j = 0;
	int count = 0;
	bool flag = false;

	while(j<64){


		if(buffer[j] == 0){	//Count the zeros 

			count++;
			flag = true;	//flag true to know when count zeros
			
		}
		else {

			encoded_word[i] = count;	//Give count of zero at first element

			encoded_word[i+1] = buffer[j];	//Give the next number to the next element

			if(flag){	//if we counted zeros and now we stop make count 0 and flag = false

				count = 0;
				flag = false;
			}

			
		}

		if(!flag){	//if we don't count zeros take step of 2 else step 0 to write at encoded_word

			i += 2;
		}		

		j++;

		if((j == 64) && flag){		//if we counted zeros write the (num_zeros,0) and terminate

			encoded_word[i] = count;	//Give count of zero at first element

			encoded_word[i+1] = 0;	//Give the next number to the next element
			i += 2;

		}
	}

	encoded_word[i] = -1;


	return encoded_word;
}

Stats * Keep_Stats(int * buffer,int size){


	int * counts = (int *)malloc(sizeof(int)*size);		//At the first appearance in that position it write the counts and at the position of duplicates write 1	


	Stats *result;

	int i,j,count;

	
	count = 1;
	//All the duplicates make them zero
	for(i=0;i<size;i++){

		for(j=i+1;j<size;j++){

			if(buffer[i] == buffer[j] && buffer[i] != 0){

				buffer[j] = 0;
				count++;
			}

		}

		//Here it has remove all the duplicates  of a value
		counts[i] = count;
		count = 1;	//To start count or another value

	}		

	num_of_chars = 0;

	for(i=0;i<size;i++){

		if(buffer[i] != 0 ){

			num_of_chars++;
		}
	}

	//We have the num of different characters

    result = (Stats *)malloc(sizeof(Stats)*num_of_chars);	//Take an array dynamically of the size we want


	int z = 0;

	for(i=0;i<size;i++){

		if(buffer[i] != 0){

			result[z].val = buffer[i];
			result[z].occurency = counts[i];
			z++;
		}
	}

	//We have all elements at struct with their value and the occurency 

	free(counts);	//Free the pointer because we have get the occurences ito Stats


	return result;
}

NODE * Huffman_Tree(int * Quantized_Matrix,int rows, int cols){

		
		int i;
		int SubTrees = num_of_chars;
		Stats * stats;
		stats = Keep_Stats(Quantized_Matrix,rows*cols);	//Take stats to build Huffman Tree


		/*-----BUILDING HUFFMAN TREE-----*/
		NODE **queue = (NODE **)malloc(sizeof(NODE)*num_of_chars);	//We have a dynamic array[num_of_chars] from pointers to NODE
		NODE *temp;	//The current node that is goint to be inserted
		NODE *root_huf_tree;	//Root of the huffman tree


		/*Initialiazing the queue*/
		for(i=0;i<num_of_chars;i++){
			queue[i] = (NODE *)malloc(sizeof(NODE));	//To every slot from array make space for one NODE 
			queue[i]->val = stats[i].val;				//Initializing the queue with the stats values
			queue[i]->occurency = stats[i].occurency;
			queue[i]->right_child = NULL;
			queue[i]->left_child = NULL;
		}


		/*Building Tree*/
		i = 0;
		while(SubTrees>1){

			qsort((void*)queue, num_of_chars, sizeof(queue[num_of_chars-1]), comparator);//Sorting at every iter the queue
			
			temp = (NODE *)malloc(sizeof(NODE));	//Create new node
			temp->left_child = queue[i];			//the 1st smallest make it left_child		
			temp->right_child = queue[i+1];			//the 2nd smallest make it right_child
			temp->occurency = queue[0]->occurency + queue[1]->occurency;	//Sum the 2 occurences
			queue[1] = temp;						//Enqueue the new node
			free(queue[i]);							//Free the 1st position of queue because doesn't needs
			SubTrees--;
			i++;
		}

		root_huf_tree = queue[num_of_chars-1];		//root_huf_tree points to the last element of queue that there is the root of the tree
													//according to the algorithm we set on above


		return root_huf_tree;


}

CODE ** Fill_Lookup_Table(NODE * Tree,int word){//Sto word otan to kalesw tha valw 0 arxiki timi
 
			
			static int length_word = 0; 
			static int i = 0;

			CODE ** code = (CODE **)malloc(sizeof(CODE)*num_of_chars);//AUTI I GRAMMI THA FYGEI APO EDW KAI THA PAEI META TIN KLISI TIS HUFFMAN_TREE KAI I METAVLITI GLOBAL

			if(Tree->left_child == NULL && Tree->right_child == NULL){	//if i am in leaf

				code[i]->val = Tree->val;	//Take the value of element to know which it is
				code[i]->code = word;
				code[i]->len = length_word;
				i++;
			}
			else{

				length_word++;
				Fill_Lookup_Table(Tree->left_child,(word<<1));	//We will get the code from the least significnat bits
				length_word++;
				Fill_Lookup_Table(Tree->right_child,(word<<1)+1);
				
			}


			return code;	

}

void Huffman_Compress(CODE ** code, int byte){


		int i,j;	
		char word;
		WORD * encoded_word;
		
		encoded_word->remaining = 8;

		for(i=0;i<num_of_chars;i++){

			if(byte == code[i]->val){

				if(code[i]->len > encoded_word->remaining){//An ta kwdika bit den xwrane grapse osa xwrane kai krata arithmo posa dn egrapses wste na ta grapseis

					encoded_word->word = (code[i]->code)&(1<<encoded_word->remaining)-1;
					encoded_word->word = encoded_word->word<<code[i]->len; 
					encoded_word->remaining -= code[i]->len;
				}
				else{
					
					encoded_word->word = encoded_word->word<<code[i]->len;	//Epistrefw to encoded word->word san apotelesma tis sunartisis
					encoded_word->word = (code[i]->code)^(encoded_word->word); //Logiko or gia na metferw to code sta teleutai bits pou tha olistithoun
					encoded_word->remaining -= code[i]->len;
				}

			}
		}






}
